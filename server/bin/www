#!/usr/bin/env node
const config = require("../config");
const ChatRoomService = require("../services/ChatRoomService");
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var https = require('https');
var http = require('http')
var fs = require('fs');
var path = require('path');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.https_listenPort);
app.set("port", port);

const privateKey = fs.readFileSync(path.resolve(config.privary_key_pem), 'utf8');
const certificate = fs.readFileSync(path.resolve(config.cert_pem), 'utf8');
const ca = fs.readFileSync(path.resolve(config.chain_pem), 'utf8');

const credentials = {
	key: privateKey,
	cert: certificate,
	ca: ca
};

const httpServer = http.createServer(app);
httpServer.listen(80, () => {
	console.log('HTTP Server running on port 80');
});
/**
 * Create HTTP server.
 */

const server = https.createServer(credentials, app);

var io = require("socket.io")(httpServer, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

io.on("connection", (socket) => {
  const id = socket.handshake.query.id;
  socket.join(id);
  console.log(id);

  socket.on("send-message", ({ conversationId, recipients, message }) => {
    console.log(conversationId, recipients, message);
    //add message to conversation on database
    ChatRoomService.putMessage(conversationId, message).then(() => {
      recipients.forEach((recipient) => {
        console.log("sending to " + recipient.id);
        console.log(conversationId);
        console.log(message);

        const room = recipient.id.toString();

        socket.broadcast.to(room).emit("receive-message", {
          conversationId,
          message,
        });
      });
    });
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
